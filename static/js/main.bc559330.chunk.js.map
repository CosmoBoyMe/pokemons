{"version":3,"sources":["const/index.ts","routes/endpoints.tsx","api/index.ts","helpers/index.ts","store/Slices/pokemonsSlice.ts","store/Slices/authSlice.tsx","store/Slices/pokemonSlice.tsx","store/Slices/filtersSlice.tsx","store/index.tsx","Components/Atoms/FormInput/index.tsx","Components/Atoms/ErrorMessage/index.tsx","Components/Molecules/FormField/index.tsx","Components/Atoms/FormButton/index.tsx","hooks/index.tsx","Components/Organisms/LoginForm/index.tsx","selectors/index.tsx","Components/pages/Login/index.tsx","Components/Organisms/OtpForm/index.tsx","Components/pages/Otp/index.tsx","Components/Organisms/Header/index.tsx","Components/Molecules/CharacterItem/index.tsx","Components/Organisms/PokemonCharacters/index.tsx","Components/Organisms/PokemonInfo/index.tsx","assets/loader.svg","Components/Atoms/Loader/index.tsx","Components/pages/Pokemon/index.tsx","Components/Atoms/Button/index.tsx","Components/Organisms/ModalPokemonContent/index.tsx","Components/Organisms/Modal/index.tsx","Components/Molecules/PokemonCard/index.tsx","Components/Organisms/PokemonCards/index.tsx","Components/Organisms/Pagination/index.tsx","Components/Molecules/Select/index.tsx","Components/Organisms/PokemonFilters/index.tsx","Components/pages/Pokemons/index.tsx","routes/index.tsx","App.tsx","index.tsx"],"names":["PokemonApi","SCREENS","axiosInstance","axios","create","baseURL","getPokemonCards","page","pageSize","type","subType","queryParamsString","params","entries","Object","length","queryParamString","forEach","key","value","buildQueryParamString","types","subtypes","cards","loadPokemonCards","createAsyncThunk","_","a","rejectWithValue","getState","pokemons","filters","currentPageNumber","selectedType","selectedSubType","data","errorMessage","response","pokemonsSlice","createSlice","name","initialState","pokemonsTotalCount","fetching","reducers","setCurrentPageNumber","state","action","payload","extraReducers","pending","fulfilled","totalCount","rejected","actions","authSlice","viewOtpForm","isAuth","authUser","logout","toogleViewOtpForm","loadPokemonCard","pokemonId","id","pokemonSlice","selectedPokemonId","selectedPokemon","setSelectedPokemonId","loadPokemonTypes","loadPokemonSubTypes","filterSlice","subTypes","setSelectedType","setSelectedSubType","combineReducers","auth","pokemon","persistConfig","version","storage","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","Input","placeholder","isValid","onChange","className","cn","ErrorMessage","text","FormField","labelName","htmlFor","FormButton","useAppDispatch","useDispatch","useAppSelector","useSelector","loginFormSchema","yup","shape","login","required","password","LoginForm","useState","error","setError","navigate","useNavigate","dispatch","useForm","resolver","yupResolver","handleSubmit","control","errors","formState","onSubmit","isUserRegistred","SCREEN_OTP","defaultValue","render","field","invalid","fieldState","message","pokemonsSelector","pokemonSelector","filtersSelector","authSelector","Login","to","SCREEN_POKEMONS","otpFormSchema","code","min","OtpForm","setErrorMessage","useEffect","checkOtpCode","Otp","SCREEN_POKEMON","console","log","SCREEN_LOGIN","Header","pathname","useLocation","onClick","CharacterItem","attributesName","attributes","join","PokemonCharacters","superType","hp","attacks","damage","cost","PokemonInfo","imgSrc","description","src","alt","Loader","LoaderSvg","Pokemon","useParams","undefined","images","large","flavorText","supertype","Button","ModalPokemonContent","onClose","onMoreDetails","Modal","open","children","closeModal","event","stopPropagation","PokemonCard","artist","PokemonCards","onClickCard","loading","map","small","Pagination","onClickPage","totalPageCount","Math","ceil","pageNumbers","currentPage","buttonsCount","pages","firstPage","max","floor","lastPage","i","push","buildPageNumbers","PAGE_COUNT_PER_PAGE","pageNumber","classNames","Select","items","selectedItemName","setSelectedItemName","showDropdown","setShowDropdown","inputValue","setInputValue","filtredItems","setfiltredItems","toogleDropdown","handlerClickLi","textContent","currentTarget","newFilteredItems","lowerCaseText","toLowerCase","filter","item","startsWith","filterItems","PokemonFilters","typeName","subTypeName","Pokemons","isOpen","setIsOpen","isPokemonCardLoading","handlerCloseModal","AppRoutes","path","element","replace","App","persistor","persistStore","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bc559330.chunk.js","sourcesContent":["const AUTH_ERROR_MESSAGE = 'login or password is incorrect'\r\nconst OTP_ERROR_MESSAGE = 'code is incorrect'\r\nconst BASE_URL_POKEMONS_API = 'https://api.pokemontcg.io/v2/'\r\nconst MAX_POKEMONS_COUNT = 9\r\nconst PAGE_COUNT_PER_PAGE = 5\r\n\r\nenum PokemonApi {\r\n    cards = 'cards',\r\n    types = 'types',\r\n    subtypes = 'subtypes',\r\n}\r\nexport {\r\n    AUTH_ERROR_MESSAGE,\r\n    OTP_ERROR_MESSAGE,\r\n    BASE_URL_POKEMONS_API,\r\n    MAX_POKEMONS_COUNT,\r\n    PAGE_COUNT_PER_PAGE,\r\n    PokemonApi,\r\n}\r\n","export enum SCREENS {\r\n    SCREEN_LOGIN = '/login',\r\n    SCREEN_OTP = '/otp',\r\n    SCREEN_POKEMON = '/pokemon/:id',\r\n    SCREEN_POKEMONS = '/pokemons',\r\n}\r\n","import axios, { AxiosPromise } from 'axios'\r\nimport { BASE_URL_POKEMONS_API, PokemonApi } from '../const'\r\nimport { buildQueryParamString } from '../helpers'\r\nimport { IPokemonCardsResponse, IPokemonCardResponse } from '../interfaces'\r\n\r\ninterface ITypesResponse {\r\n    data: Array<string>\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: BASE_URL_POKEMONS_API,\r\n})\r\n\r\nconst getPokemonCards = (\r\n    page: number,\r\n    pageSize: number,\r\n    type: string | '',\r\n    subType: string | ''\r\n): AxiosPromise<IPokemonCardsResponse> => {\r\n    const queryParams = { types: type, subtypes: subType }\r\n    const queryParamsString = buildQueryParamString(queryParams)\r\n    return axiosInstance(\r\n        `${PokemonApi.cards}?page=${page}&pageSize=${pageSize}${queryParamsString}`\r\n    )\r\n}\r\n\r\nconst getPokemonCard = (id: string): AxiosPromise<IPokemonCardResponse> => {\r\n    return axiosInstance(`${PokemonApi.cards}/${id}`)\r\n}\r\n\r\nconst getPokemonTypes = (): AxiosPromise<ITypesResponse> =>\r\n    axiosInstance(PokemonApi.types)\r\n\r\nconst getPokemonSubTypes = (): AxiosPromise<ITypesResponse> =>\r\n    axiosInstance(PokemonApi.subtypes)\r\n\r\nexport { getPokemonCards, getPokemonCard, getPokemonTypes, getPokemonSubTypes }\r\n","const buildQueryParamString = (params: { [key: string]: string }): string => {\r\n    const entries: Array<[string, string]> = Object.entries(params)\r\n\r\n    if (entries.length === 0) {\r\n        return ''\r\n    }\r\n\r\n    let queryParamString = '&q='\r\n    entries.forEach(([key, value]) => {\r\n        if (value) {\r\n            queryParamString += `${key}:${value} `\r\n        }\r\n    })\r\n    return queryParamString\r\n}\r\n\r\nconst isUserRegistred = (login: string, password: string): boolean => {\r\n    if (login === 'kode@kode.ru' && password === 'Enk0deng') {\r\n        return true\r\n    }\r\n    if (login === 'admin' && password === 'admin') {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nconst buildPageNumbers = (\r\n    currentPage: number,\r\n    totalPageCount: number,\r\n    buttonsCount: number\r\n): number[] => {\r\n    const pages = []\r\n    let firstPage = Math.max(1, currentPage - Math.floor(buttonsCount / 2))\r\n    let lastPage = Math.min(\r\n        totalPageCount,\r\n        currentPage + Math.floor(buttonsCount / 2)\r\n    )\r\n\r\n    if (lastPage - firstPage + 1 < buttonsCount) {\r\n        if (currentPage < totalPageCount / 2) {\r\n            lastPage = Math.min(\r\n                totalPageCount,\r\n                lastPage + (buttonsCount - (lastPage - firstPage))\r\n            )\r\n        } else {\r\n            firstPage = Math.max(\r\n                1,\r\n                firstPage - (buttonsCount - (lastPage - firstPage))\r\n            )\r\n        }\r\n    }\r\n\r\n    if (lastPage - firstPage + 1 > buttonsCount) {\r\n        if (currentPage > totalPageCount / 2) {\r\n            firstPage += 1\r\n        } else {\r\n            lastPage -= 1\r\n        }\r\n    }\r\n\r\n    for (let i = firstPage; i <= lastPage; i += 1) {\r\n        pages.push(i)\r\n    }\r\n\r\n    return pages\r\n}\r\n\r\nconst checkOtpCode = (code: string): boolean => code === '12345'\r\n\r\nexport {\r\n    buildQueryParamString,\r\n    isUserRegistred,\r\n    checkOtpCode,\r\n    buildPageNumbers,\r\n}\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { RootState } from '../index'\r\nimport { getPokemonCards } from '../../api'\r\nimport { IPokemonCardsResponse, IPokemonCardsItem } from '../../interfaces'\r\nimport { MAX_POKEMONS_COUNT } from '../../const'\r\n\r\ninterface IPokemonsState {\r\n    errorMessage: string\r\n    pokemons: [IPokemonCardsItem] | null\r\n    currentPageNumber: number\r\n    pokemonsTotalCount: number\r\n    fetching: boolean\r\n}\r\n\r\nconst initialState: IPokemonsState = {\r\n    pokemons: null,\r\n    currentPageNumber: 1,\r\n    pokemonsTotalCount: 0,\r\n    errorMessage: '',\r\n    fetching: false,\r\n}\r\n\r\nexport const loadPokemonCards = createAsyncThunk(\r\n    'pokemons/loadPokemonCards',\r\n    async (_, { rejectWithValue, getState }): Promise<any> => {\r\n        const { pokemons, filters } = getState() as RootState\r\n        const { currentPageNumber } = pokemons\r\n        const { selectedType, selectedSubType } = filters\r\n\r\n        try {\r\n            const { data } = await getPokemonCards(\r\n                currentPageNumber,\r\n                MAX_POKEMONS_COUNT,\r\n                selectedType,\r\n                selectedSubType\r\n            )\r\n            return data\r\n        } catch (error: any) {\r\n            const errorMessage: string = error.response.data\r\n            return rejectWithValue(errorMessage)\r\n        }\r\n    }\r\n)\r\n\r\nconst pokemonsSlice = createSlice({\r\n    name: 'pokemons',\r\n    initialState,\r\n    reducers: {\r\n        setCurrentPageNumber: (state, action: PayloadAction<number>) => {\r\n            state.currentPageNumber = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [loadPokemonCards.pending.type]: (state) => {\r\n            state.fetching = true\r\n        },\r\n        [loadPokemonCards.fulfilled.type]: (\r\n            state,\r\n            action: PayloadAction<IPokemonCardsResponse>\r\n        ) => {\r\n            state.pokemons = action.payload.data\r\n            state.pokemonsTotalCount = action.payload.totalCount\r\n            state.errorMessage = ''\r\n            state.fetching = false\r\n        },\r\n        [loadPokemonCards.rejected.type]: (\r\n            state,\r\n            action: PayloadAction<string>\r\n        ) => {\r\n            state.errorMessage = action.payload\r\n            state.fetching = false\r\n        },\r\n    },\r\n})\r\n\r\nexport { pokemonsSlice }\r\nexport const { setCurrentPageNumber } = pokemonsSlice.actions\r\nexport default pokemonsSlice.reducer\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\ninterface IAuthState {\r\n    isAuth: boolean\r\n    viewOtpForm: boolean\r\n}\r\n\r\nconst initialState: IAuthState = {\r\n    viewOtpForm: false,\r\n    isAuth: false,\r\n}\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        authUser: (state) => {\r\n            state.isAuth = true\r\n        },\r\n\r\n        logout: (state) => {\r\n            state.isAuth = false\r\n        },\r\n\r\n        toogleViewOtpForm: (state, action) => {\r\n            state.viewOtpForm = action.payload\r\n        },\r\n    },\r\n})\r\n\r\nexport { authSlice }\r\n\r\nexport const { authUser, logout, toogleViewOtpForm } = authSlice.actions\r\n\r\nexport default authSlice.reducer\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { getPokemonCard } from '../../api'\r\nimport { IPokemonCard } from '../../interfaces'\r\n\r\ninterface IPokemonsState {\r\n    errorMessage: string\r\n    selectedPokemon: null | IPokemonCard\r\n    selectedPokemonId: null | string\r\n    fetching: boolean\r\n}\r\n\r\nexport const loadPokemonCard = createAsyncThunk<\r\n    IPokemonCard,\r\n    string,\r\n    {\r\n        rejectValue: string\r\n    }\r\n>('pokemon/loadPokemonCard', async (pokemonId, { rejectWithValue }) => {\r\n    try {\r\n        const { data } = await getPokemonCard(pokemonId)\r\n        return data.data\r\n    } catch (error: any) {\r\n        const errorMessage: string = error.response.data\r\n        return rejectWithValue(errorMessage)\r\n    }\r\n})\r\n\r\nconst initialState: IPokemonsState = {\r\n    selectedPokemonId: null,\r\n    selectedPokemon: null,\r\n    errorMessage: '',\r\n    fetching: false,\r\n}\r\n\r\nconst pokemonSlice = createSlice({\r\n    name: 'pokemon',\r\n    initialState,\r\n    reducers: {\r\n        setSelectedPokemonId: (state, action: PayloadAction<string>) => {\r\n            state.selectedPokemonId = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [loadPokemonCard.pending.type]: (state) => {\r\n            state.fetching = true\r\n        },\r\n\r\n        [loadPokemonCard.fulfilled.type]: (\r\n            state,\r\n            action: PayloadAction<IPokemonCard>\r\n        ) => {\r\n            state.selectedPokemon = action.payload\r\n            state.errorMessage = ''\r\n            state.fetching = false\r\n        },\r\n\r\n        [loadPokemonCard.rejected.type]: (\r\n            state,\r\n            action: PayloadAction<string>\r\n        ) => {\r\n            state.errorMessage = action.payload\r\n            state.fetching = false\r\n        },\r\n    },\r\n})\r\n\r\nexport { pokemonSlice }\r\nexport const { setSelectedPokemonId } = pokemonSlice.actions\r\nexport default pokemonSlice.reducer\r\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { getPokemonTypes, getPokemonSubTypes } from '../../api'\r\n\r\ninterface IFilterState {\r\n    types: null | Array<string>\r\n    subTypes: null | Array<string>\r\n    selectedType: string\r\n    selectedSubType: string\r\n    errorMessage: null | string\r\n    fetching: boolean\r\n}\r\n\r\nconst initialState: IFilterState = {\r\n    types: null,\r\n    subTypes: null,\r\n    selectedType: '',\r\n    selectedSubType: '',\r\n    errorMessage: null,\r\n    fetching: false,\r\n}\r\n\r\nexport const loadPokemonTypes = createAsyncThunk<\r\n    Array<string>,\r\n    undefined,\r\n    {\r\n        rejectValue: string\r\n    }\r\n>('pokemons/loadPokemonTypes', async (_, { rejectWithValue }) => {\r\n    try {\r\n        const { data } = await getPokemonTypes()\r\n        return data.data\r\n    } catch (error: any) {\r\n        const errorMessage: string = error.response.data\r\n        return rejectWithValue(errorMessage)\r\n    }\r\n})\r\n\r\nexport const loadPokemonSubTypes = createAsyncThunk<\r\n    Array<string>,\r\n    undefined,\r\n    {\r\n        rejectValue: string\r\n    }\r\n>('filters/loadPokemonSubTypes', async (_, { rejectWithValue }) => {\r\n    try {\r\n        const { data } = await getPokemonSubTypes()\r\n        return data.data\r\n    } catch (error: any) {\r\n        return rejectWithValue(error.response.data)\r\n    }\r\n})\r\n\r\nconst filterSlice = createSlice({\r\n    name: 'filters',\r\n    initialState,\r\n    reducers: {\r\n        setSelectedType(state, action: PayloadAction<string>) {\r\n            state.selectedType = action.payload\r\n        },\r\n        setSelectedSubType(state, action: PayloadAction<string>) {\r\n            state.selectedSubType = action.payload\r\n        },\r\n    },\r\n    extraReducers: {\r\n        [loadPokemonTypes.pending.type]: (state) => {\r\n            state.fetching = true\r\n        },\r\n        [loadPokemonTypes.fulfilled.type]: (\r\n            state,\r\n            action: PayloadAction<Array<string>>\r\n        ) => {\r\n            state.types = action.payload\r\n            state.errorMessage = ''\r\n            state.fetching = false\r\n        },\r\n        [loadPokemonTypes.rejected.type]: (\r\n            state,\r\n            action: PayloadAction<string>\r\n        ) => {\r\n            state.errorMessage = action.payload\r\n            state.fetching = false\r\n        },\r\n\r\n        [loadPokemonSubTypes.pending.type]: (state) => {\r\n            state.fetching = true\r\n        },\r\n        [loadPokemonSubTypes.fulfilled.type]: (\r\n            state,\r\n            action: PayloadAction<Array<string>>\r\n        ) => {\r\n            state.subTypes = action.payload\r\n            state.errorMessage = ''\r\n            state.fetching = false\r\n        },\r\n        [loadPokemonSubTypes.rejected.type]: (\r\n            state,\r\n            action: PayloadAction<string>\r\n        ) => {\r\n            state.errorMessage = action.payload\r\n            state.fetching = false\r\n        },\r\n    },\r\n})\r\n\r\nexport { filterSlice }\r\nexport const { setSelectedType, setSelectedSubType } = filterSlice.actions\r\nexport default filterSlice.reducer\r\n","import { combineReducers, configureStore } from '@reduxjs/toolkit'\r\nimport {\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\nimport pokemons from './Slices/pokemonsSlice'\r\nimport auth from './Slices/authSlice'\r\nimport pokemon from './Slices/pokemonSlice'\r\nimport filters from './Slices/filtersSlice'\r\n\r\nconst reducers = combineReducers({\r\n    auth,\r\n    pokemons,\r\n    pokemon,\r\n    filters,\r\n})\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    version: 1,\r\n    storage,\r\n}\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducers)\r\n\r\nexport const store = configureStore({\r\n    reducer: persistedReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware({\r\n            serializableCheck: {\r\n                ignoredActions: [\r\n                    FLUSH,\r\n                    REHYDRATE,\r\n                    PAUSE,\r\n                    PERSIST,\r\n                    PURGE,\r\n                    REGISTER,\r\n                ],\r\n            },\r\n        }),\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import { ChangeEventHandler, FC } from 'react'\r\nimport './FormInput.scss'\r\nimport cn from 'classnames'\r\n\r\ninterface IFormInputProps {\r\n    type: 'password' | 'text'\r\n    placeholder: string\r\n    id: string\r\n    name: string\r\n    value: string\r\n    isValid: boolean\r\n    onChange: ChangeEventHandler<HTMLInputElement>\r\n}\r\n\r\nconst Input: FC<IFormInputProps> = ({\r\n    type,\r\n    placeholder,\r\n    id,\r\n    name,\r\n    value,\r\n    isValid,\r\n    onChange,\r\n}) => {\r\n    return (\r\n        <input\r\n            className={cn('form-input', {\r\n                'form-input--invalid': !isValid,\r\n            })}\r\n            name={name}\r\n            id={id}\r\n            placeholder={placeholder}\r\n            onChange={onChange}\r\n            type={type}\r\n            value={value}\r\n        />\r\n    )\r\n}\r\n\r\nexport { Input }\r\n","import { FC } from 'react'\r\nimport './ErrorMessage.scss'\r\n\r\ninterface IErrorMessageProps {\r\n    text?: string\r\n}\r\n\r\nconst ErrorMessage: FC<IErrorMessageProps> = ({ text }) => (\r\n    <p className=\"error-message\">{text}</p>\r\n)\r\nexport { ErrorMessage }\r\n","import { ChangeEventHandler, FC } from 'react'\r\nimport './FormField.scss'\r\nimport { Input } from '../../Atoms/FormInput'\r\nimport { ErrorMessage } from '../../Atoms/ErrorMessage'\r\n\r\ninterface IFormField {\r\n    labelName: string\r\n    id: string\r\n    value: string\r\n    isValid: boolean\r\n    errorMessage?: string\r\n    type: 'password' | 'text'\r\n    placeholder: string\r\n    name: string\r\n    onChange: ChangeEventHandler<HTMLInputElement>\r\n}\r\n\r\nconst FormField: FC<IFormField> = ({\r\n    id,\r\n    labelName,\r\n    type,\r\n    value,\r\n    isValid,\r\n    errorMessage,\r\n    placeholder,\r\n    name,\r\n    onChange,\r\n}) => {\r\n    return (\r\n        <div className=\"form-field\">\r\n            <label className=\"form-field__label\" htmlFor={id}>\r\n                {labelName}\r\n            </label>\r\n            <Input\r\n                isValid={isValid}\r\n                name={name}\r\n                value={value}\r\n                id={id}\r\n                type={type}\r\n                placeholder={placeholder}\r\n                onChange={onChange}\r\n            />\r\n            <ErrorMessage text={errorMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { FormField }\r\n","import { FC } from 'react'\r\nimport './FormButton.scss'\r\n\r\nconst FormButton: FC = () => {\r\n    return <button className=\"form-button\" aria-label=\"Send form\" />\r\n}\r\n\r\nexport { FormButton }\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\r\nimport type { RootState, AppDispatch } from '../store'\r\n\r\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\r\n","import { FC, useState } from 'react'\r\nimport { useForm, Controller, SubmitHandler } from 'react-hook-form'\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport './LoginForm.scss'\r\n\r\nimport { FormField } from '../../Molecules/FormField'\r\nimport { FormButton } from '../../Atoms/FormButton'\r\nimport { ErrorMessage } from '../../Atoms/ErrorMessage'\r\nimport { SCREENS } from '../../../routes/endpoints'\r\nimport { AUTH_ERROR_MESSAGE } from '../../../const'\r\nimport { isUserRegistred } from '../../../helpers'\r\nimport { toogleViewOtpForm } from '../../../store/Slices/authSlice'\r\nimport { useAppDispatch } from '../../../hooks'\r\n\r\ninterface ILoginFormValues {\r\n    login: string\r\n    password: string\r\n}\r\n\r\nconst loginFormSchema = yup\r\n    .object()\r\n    .shape({\r\n        login: yup.string().required('is Required field'),\r\n        password: yup.string().required('is Required field'),\r\n    })\r\n    .required()\r\n\r\nconst LoginForm: FC = () => {\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handlerSubmitForm: SubmitHandler<ILoginFormValues> = ({\r\n        login,\r\n        password,\r\n    }) => {\r\n        if (isUserRegistred(login, password)) {\r\n            dispatch(toogleViewOtpForm(true))\r\n            navigate(SCREENS.SCREEN_OTP)\r\n        }\r\n        setError(AUTH_ERROR_MESSAGE)\r\n    }\r\n\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        formState: { errors },\r\n    } = useForm<ILoginFormValues>({\r\n        resolver: yupResolver(loginFormSchema),\r\n    })\r\n\r\n    return (\r\n        <form className=\"login-form\" onSubmit={handleSubmit(handlerSubmitForm)}>\r\n            <div className=\"login-form__controller\">\r\n                <Controller\r\n                    name=\"login\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    render={({ field, fieldState: { invalid } }) => (\r\n                        <FormField\r\n                            placeholder=\"login\"\r\n                            type=\"text\"\r\n                            labelName=\"Login\"\r\n                            value={field.value}\r\n                            isValid={!invalid}\r\n                            errorMessage={errors.login?.message}\r\n                            onChange={field.onChange}\r\n                            name=\"login\"\r\n                            id=\"login\"\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n            <div className=\"login-form__controller\">\r\n                <Controller\r\n                    name=\"password\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    render={({ field, fieldState: { invalid } }) => (\r\n                        <FormField\r\n                            placeholder=\"password\"\r\n                            type=\"password\"\r\n                            labelName=\"password\"\r\n                            value={field.value}\r\n                            isValid={!invalid}\r\n                            errorMessage={errors.password?.message}\r\n                            onChange={field.onChange}\r\n                            name=\"password\"\r\n                            id=\"password\"\r\n                        />\r\n                    )}\r\n                />\r\n            </div>\r\n            <div className=\"login-form__btn\">\r\n                <FormButton />\r\n            </div>\r\n            {error && <ErrorMessage text={error} />}\r\n        </form>\r\n    )\r\n}\r\n\r\nexport { LoginForm }\r\n","import { RootState } from '../store'\r\n\r\nconst pokemonsSelector = (state: RootState) => state.pokemons\r\nconst pokemonSelector = (state: RootState) => state.pokemon\r\nconst filtersSelector = (state: RootState) => state.filters\r\nconst authSelector = (state: RootState) => state.auth\r\n\r\nexport { pokemonsSelector, filtersSelector, authSelector, pokemonSelector }\r\n","import './Login.scss'\r\nimport { FC } from 'react'\r\nimport { Navigate } from 'react-router'\r\n\r\nimport { LoginForm } from '../../Organisms/LoginForm'\r\nimport { useAppSelector } from '../../../hooks'\r\nimport { authSelector } from '../../../selectors'\r\nimport { SCREENS } from '../../../routes/endpoints'\r\n\r\nconst Login: FC = () => {\r\n    const { isAuth } = useAppSelector(authSelector)\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={SCREENS.SCREEN_POKEMONS} />\r\n    }\r\n    return (\r\n        <div className=\"login\">\r\n            <div className=\"container\">\r\n                <div className=\"login__login-form\">\r\n                    <LoginForm />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Login }\r\n","import { FC, useEffect, useState } from 'react'\r\nimport './OtpForm.scss'\r\n\r\nimport { useForm, Controller, SubmitHandler } from 'react-hook-form'\r\nimport { useNavigate } from 'react-router'\r\nimport * as yup from 'yup'\r\nimport { yupResolver } from '@hookform/resolvers/yup'\r\nimport { checkOtpCode } from '../../../helpers'\r\nimport { FormField } from '../../Molecules/FormField'\r\nimport { FormButton } from '../../Atoms/FormButton'\r\nimport { ErrorMessage } from '../../Atoms/ErrorMessage'\r\nimport { SCREENS } from '../../../routes/endpoints'\r\nimport { OTP_ERROR_MESSAGE } from '../../../const'\r\nimport { useAppDispatch } from '../../../hooks'\r\nimport { authUser, toogleViewOtpForm } from '../../../store/Slices/authSlice'\r\n\r\ninterface IOtpFormValues {\r\n    code: string\r\n}\r\n\r\nconst otpFormSchema = yup\r\n    .object()\r\n    .shape({\r\n        code: yup.string().min(5).required('is Required field'),\r\n    })\r\n    .required()\r\n\r\nconst OtpForm: FC = () => {\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const navigate = useNavigate()\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handlerSubmitForm: SubmitHandler<IOtpFormValues> = ({ code }) => {\r\n        if (checkOtpCode(code)) {\r\n            navigate(SCREENS.SCREEN_POKEMONS)\r\n            dispatch(authUser())\r\n        }\r\n        setErrorMessage(OTP_ERROR_MESSAGE)\r\n    }\r\n\r\n    const {\r\n        handleSubmit,\r\n        control,\r\n        formState: { errors },\r\n    } = useForm<IOtpFormValues>({\r\n        resolver: yupResolver(otpFormSchema),\r\n    })\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            dispatch(toogleViewOtpForm(false))\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <form className=\"otp-form\" onSubmit={handleSubmit(handlerSubmitForm)}>\r\n            <div className=\"otp-form__controller\">\r\n                <Controller\r\n                    name=\"code\"\r\n                    control={control}\r\n                    defaultValue=\"\"\r\n                    render={({ field, fieldState: { invalid } }) => (\r\n                        <FormField\r\n                            placeholder=\"Code from SMS\"\r\n                            type=\"text\"\r\n                            labelName=\"Code from SMS\"\r\n                            value={field.value}\r\n                            isValid={!invalid}\r\n                            onChange={field.onChange}\r\n                            name=\"code\"\r\n                            id=\"code\"\r\n                        />\r\n                    )}\r\n                />\r\n                {errors.code?.message && (\r\n                    <ErrorMessage text={errors.code.message} />\r\n                )}\r\n            </div>\r\n            <div className=\"otp-form__btn\">\r\n                <FormButton />\r\n            </div>\r\n            <ErrorMessage text={errorMessage} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport { OtpForm }\r\n","import { FC } from 'react'\r\nimport { Navigate } from 'react-router'\r\nimport { useAppSelector } from '../../../hooks'\r\nimport { authSelector } from '../../../selectors'\r\nimport { OtpForm } from '../../Organisms/OtpForm'\r\nimport { SCREENS } from '../../../routes/endpoints'\r\nimport './Otp.scss'\r\n\r\nconst Otp: FC = () => {\r\n    const { isAuth, viewOtpForm } = useAppSelector(authSelector)\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={SCREENS.SCREEN_POKEMON} />\r\n    }\r\n\r\n    if (!viewOtpForm) {\r\n        return <Navigate to={SCREENS.SCREEN_LOGIN} />\r\n    }\r\n\r\n    console.log('code: 12345')\r\n    return (\r\n        <div className=\"otp\">\r\n            <div className=\"container\">\r\n                <div className=\"otp__form\">\r\n                    <OtpForm />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport { Otp }\r\n","import { FC } from 'react'\r\nimport './Header.scss'\r\nimport { useNavigate, useLocation } from 'react-router-dom'\r\nimport { useAppDispatch } from '../../../hooks'\r\nimport { logout } from '../../../store/Slices/authSlice'\r\n\r\nconst Header: FC = () => {\r\n    const dispatch = useAppDispatch()\r\n    const navigate = useNavigate()\r\n    const { pathname } = useLocation()\r\n    const handlerClickBackBtn = (): void => {\r\n        const pageNumber = -1\r\n        navigate(pageNumber)\r\n    }\r\n\r\n    const handlerClickLogoutBtn = (): void => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            {pathname !== '/pokemons' && (\r\n                <button\r\n                    className=\"header__back-btn\"\r\n                    onClick={handlerClickBackBtn}\r\n                    type=\"button\"\r\n                >\r\n                    Back\r\n                </button>\r\n            )}\r\n            <button\r\n                className=\"header__logout-btn\"\r\n                onClick={handlerClickLogoutBtn}\r\n                type=\"button\"\r\n            >\r\n                Logout\r\n            </button>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport { Header }\r\n","import { FC } from 'react'\r\nimport './CharacterItem.scss'\r\n\r\ninterface ICharacterItemProps {\r\n    attributesName: string\r\n    attributes: string | [string]\r\n}\r\n\r\nconst CharacterItem: FC<ICharacterItemProps> = ({\r\n    attributesName,\r\n    attributes,\r\n}) => {\r\n    return (\r\n        <div className=\"character-item\">\r\n            <p className=\"character-item__text\">\r\n                <span className=\"character-item__attributes-name\">\r\n                    {attributesName}:{' '}\r\n                </span>\r\n                {typeof attributes === 'string'\r\n                    ? attributes\r\n                    : attributes.join(', ')}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { CharacterItem }\r\n","import { FC } from 'react'\r\nimport { CharacterItem } from '../../Molecules/CharacterItem'\r\nimport './PokemonCharacters.scss'\r\n\r\ninterface IPokemonCharacters {\r\n    name: string\r\n    superType: string\r\n    types: [string]\r\n    subTypes: [string]\r\n    hp: string\r\n    attacks: [\r\n        {\r\n            name: string\r\n            cost: [string]\r\n            convertedEnergyCost: number\r\n            damage: string\r\n            text: string\r\n        }\r\n    ]\r\n}\r\n\r\nconst PokemonCharacters: FC<IPokemonCharacters> = ({\r\n    name,\r\n    superType,\r\n    types,\r\n    subTypes,\r\n    hp,\r\n    attacks,\r\n}) => {\r\n    return (\r\n        <div className=\"pokemon-characters\">\r\n            <div className=\"pokemon-characters__list\">\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem\r\n                        attributesName=\"Pokemon name\"\r\n                        attributes={name}\r\n                    />\r\n                </div>\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem\r\n                        attributesName=\"Super Type\"\r\n                        attributes={superType}\r\n                    />\r\n                </div>\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem attributesName=\"types\" attributes={types} />\r\n                </div>\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem\r\n                        attributesName=\"Sub Type\"\r\n                        attributes={subTypes}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"pokemon-characters__list\">\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem\r\n                        attributesName=\"Attack damage\"\r\n                        attributes={attacks[0].damage}\r\n                    />\r\n                </div>\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem\r\n                        attributesName=\"Attack cost\"\r\n                        attributes={attacks[0].cost}\r\n                    />\r\n                </div>\r\n                <div className=\"pokemon-character__item\">\r\n                    <CharacterItem attributesName=\"hp\" attributes={hp} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { PokemonCharacters }\r\n","import { FC } from 'react'\r\nimport './PokemonInfo.scss'\r\n\r\ninterface IPokemonInfoProps {\r\n    imgSrc: string\r\n    description?: string\r\n}\r\n\r\nconst PokemonInfo: FC<IPokemonInfoProps> = ({ imgSrc, description }) => {\r\n    return (\r\n        <div className=\"pokemon-info\">\r\n            <img src={imgSrc} alt=\"pokemon\" className=\"pokemon-info__img\" />\r\n            <p className=\"pokemon-info__description\">{description}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { PokemonInfo }\r\n","export default __webpack_public_path__ + \"static/media/loader.64291b59.svg\";","import { FC } from 'react'\r\nimport LoaderSvg from '../../../assets/loader.svg'\r\nimport './Loader.scss'\r\n\r\nconst Loader: FC = () => {\r\n    return <img className=\"loader\" src={LoaderSvg} alt=\"loader\" />\r\n}\r\n\r\nexport { Loader }\r\n","import { FC, useEffect } from 'react'\r\nimport './Pokemon.scss'\r\nimport { useParams } from 'react-router'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks'\r\nimport { pokemonSelector } from '../../../selectors'\r\nimport { Header } from '../../Organisms/Header'\r\nimport { loadPokemonCard } from '../../../store/Slices/pokemonSlice'\r\nimport { PokemonCharacters } from '../../Organisms/PokemonCharacters'\r\nimport { PokemonInfo } from '../../Organisms/PokemonInfo'\r\nimport { Loader } from '../../Atoms/Loader'\r\n\r\nconst Pokemon: FC = () => {\r\n    const { id } = useParams()\r\n    const { selectedPokemon } = useAppSelector(pokemonSelector)\r\n    const dispatch = useAppDispatch()\r\n\r\n    useEffect(() => {\r\n        if (id !== undefined && selectedPokemon?.id !== id) {\r\n            dispatch(loadPokemonCard(id))\r\n        }\r\n    }, [dispatch, id, selectedPokemon])\r\n\r\n    return (\r\n        <div className=\"pokemon\">\r\n            <div className=\"container\">\r\n                <Header />\r\n                {selectedPokemon === null ? (\r\n                    <div className=\"pokemon__loader\">\r\n                        <Loader />\r\n                    </div>\r\n                ) : (\r\n                    <main className=\"pokemon__main\">\r\n                        <div className=\"pokemon__inner\">\r\n                            <div className=\"pokemon__info-container\">\r\n                                <PokemonInfo\r\n                                    imgSrc={selectedPokemon.images.large}\r\n                                    description={selectedPokemon.flavorText}\r\n                                />\r\n                            </div>\r\n                            <div className=\"pokemon__characters\">\r\n                                <PokemonCharacters\r\n                                    hp={selectedPokemon.hp}\r\n                                    name={selectedPokemon.name}\r\n                                    subTypes={selectedPokemon.subtypes}\r\n                                    superType={selectedPokemon.supertype}\r\n                                    types={selectedPokemon.types}\r\n                                    attacks={selectedPokemon.attacks}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </main>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Pokemon }\r\n","import { FC } from 'react'\r\n\r\ninterface IButtonProps {\r\n    text: string\r\n    onClick: () => void\r\n}\r\n\r\nconst Button: FC<IButtonProps> = ({ text, onClick }) => {\r\n    return (\r\n        <button onClick={onClick} className=\"button\">\r\n            {text}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport { Button }\r\n","import { FC } from 'react'\r\nimport { Button } from '../../Atoms/Button'\r\nimport './ModalPokemonContent.scss'\r\n\r\ninterface IModalPokemonContentProps {\r\n    name: string\r\n    imgSrc: string\r\n    onClose: () => void\r\n    onMoreDetails: () => void\r\n}\r\nconst ModalPokemonContent: FC<IModalPokemonContentProps> = ({\r\n    name,\r\n    imgSrc,\r\n    onClose,\r\n    onMoreDetails,\r\n}) => {\r\n    return (\r\n        <div className=\"modal-pokemon-content\">\r\n            <h2 className=\"modal-pokemon-content__name\">{name}</h2>\r\n            <img\r\n                className=\"modal-pokemon-content__img\"\r\n                src={imgSrc}\r\n                alt=\"pokemon\"\r\n            />\r\n            <div className=\"modal-pokemon-content__buttons\">\r\n                <Button text=\"close\" onClick={onClose} />\r\n                <Button text=\"more details\" onClick={onMoreDetails} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { ModalPokemonContent }\r\n","import './Modal.scss'\r\nimport { FC } from 'react'\r\n\r\ninterface IModalProps {\r\n    open: boolean\r\n    closeModal(): void\r\n}\r\n\r\nconst Modal: FC<IModalProps> = ({ open, children, closeModal }) => {\r\n    if (!open) {\r\n        return null\r\n    }\r\n    return (\r\n        <div onClick={closeModal} className=\"modal\">\r\n            <div\r\n                className=\"container\"\r\n                onClick={(event) => event.stopPropagation()}\r\n            >\r\n                <div className=\"modal__content\">{children}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Modal }\r\n","import { FC } from 'react'\r\nimport './PokemonCard.scss'\r\n\r\ninterface IPokemonCardProps {\r\n    imgSrc: string\r\n    name: string\r\n    artist: string\r\n}\r\n\r\nconst PokemonCard: FC<IPokemonCardProps> = ({ imgSrc, name, artist }) => {\r\n    return (\r\n        <div className=\"pokemon-card\">\r\n            <img\r\n                className=\"pokemon-card__img\"\r\n                src={imgSrc}\r\n                alt={`pokemon ${name}`}\r\n            />\r\n            <p className=\"pokemon-card__name\">{name}</p>\r\n            <p className=\"pokemon-card__artist\">{artist}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { PokemonCard }\r\n","import './PokemonCards.scss'\r\nimport { FC } from 'react'\r\n\r\nimport { Loader } from '../../Atoms/Loader'\r\nimport { PokemonCard } from '../../Molecules/PokemonCard'\r\nimport { IPokemonCardsItem } from '../../../interfaces'\r\n\r\ninterface IPokemonCardsProps {\r\n    pokemons: Array<IPokemonCardsItem> | null\r\n    onClickCard: (id: string) => void\r\n    loading: boolean\r\n}\r\n\r\nconst PokemonCards: FC<IPokemonCardsProps> = ({\r\n    pokemons,\r\n    onClickCard,\r\n    loading,\r\n}) => {\r\n    return (\r\n        <div className=\"pokemon-cards\">\r\n            {loading ? (\r\n                <div className=\"pokemon-cards__loader\">\r\n                    <Loader />\r\n                </div>\r\n            ) : (\r\n                <ul className=\"pokemon-cards__list\">\r\n                    {pokemons &&\r\n                        (pokemons.length === 0 ? (\r\n                            <h3 className=\"pokemon-cards__not-found-text\">\r\n                                pokemons not found\r\n                            </h3>\r\n                        ) : (\r\n                            pokemons.map(\r\n                                ({ id, name, artist, images: { small } }) => {\r\n                                    return (\r\n                                        <li\r\n                                            onClick={() => onClickCard(id)}\r\n                                            key={id}\r\n                                            className=\"pokemon-cards__item\"\r\n                                        >\r\n                                            <PokemonCard\r\n                                                name={name}\r\n                                                artist={artist}\r\n                                                imgSrc={small}\r\n                                            />\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                            )\r\n                        ))}\r\n                </ul>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { PokemonCards }\r\n","import './Pagination.scss'\r\nimport classNames from 'classnames'\r\nimport { FC } from 'react'\r\nimport { buildPageNumbers } from '../../../helpers'\r\nimport { MAX_POKEMONS_COUNT, PAGE_COUNT_PER_PAGE } from '../../../const'\r\n\r\ninterface IPaginationProps {\r\n    totalCount: number\r\n    currentPageNumber: number\r\n    onClickPage(page: number): void\r\n}\r\n\r\nconst Pagination: FC<IPaginationProps> = ({\r\n    totalCount,\r\n    currentPageNumber,\r\n    onClickPage,\r\n}) => {\r\n    const totalPageCount = Math.ceil(totalCount / MAX_POKEMONS_COUNT)\r\n\r\n    const pageNumbers = buildPageNumbers(\r\n        currentPageNumber,\r\n        totalPageCount,\r\n        PAGE_COUNT_PER_PAGE\r\n    )\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            {currentPageNumber > PAGE_COUNT_PER_PAGE - 2 && (\r\n                <button\r\n                    className=\"pagination__btn\"\r\n                    onClick={() => onClickPage(1)}\r\n                >\r\n                    first\r\n                </button>\r\n            )}\r\n            <ul className=\"pagination__number-list\">\r\n                {pageNumbers.map((pageNumber) => (\r\n                    <li\r\n                        onClick={() => onClickPage(pageNumber)}\r\n                        key={pageNumber}\r\n                        className={classNames('pagination__page-number', {\r\n                            'pagination__page-number--active':\r\n                                pageNumber === currentPageNumber,\r\n                        })}\r\n                    >\r\n                        {pageNumber}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {currentPageNumber < totalPageCount - 2 && (\r\n                <button\r\n                    onClick={() => onClickPage(totalPageCount)}\r\n                    className=\"pagination__btn\"\r\n                >\r\n                    last\r\n                </button>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Pagination }\r\n","import { ChangeEvent, FC, MouseEvent, useState } from 'react'\r\nimport './Select.scss'\r\nimport cn from 'classnames'\r\n\r\ninterface ISelectProps {\r\n    items: Array<string>\r\n    name: string\r\n    selectedItemName: string | ''\r\n    setSelectedItemName: (itemName: string) => void\r\n}\r\n\r\nconst filterItems = (text: string, items: Array<string>): Array<string> => {\r\n    const lowerCaseText = text.toLowerCase()\r\n\r\n    return items.filter((item) => {\r\n        const lowerCaseItem = item.toLowerCase()\r\n\r\n        return lowerCaseItem.startsWith(lowerCaseText)\r\n    })\r\n}\r\n\r\nconst Select: FC<ISelectProps> = ({\r\n    items,\r\n    name,\r\n    selectedItemName,\r\n    setSelectedItemName,\r\n}) => {\r\n    const [showDropdown, setShowDropdown] = useState<boolean>(false)\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [filtredItems, setfiltredItems] = useState(items)\r\n\r\n    const handlerChangeInput = (event: ChangeEvent<HTMLInputElement>): void => {\r\n        const { value } = event.currentTarget\r\n        const newFilteredItems = filterItems(value, items)\r\n\r\n        setInputValue(value)\r\n        setfiltredItems(newFilteredItems)\r\n    }\r\n\r\n    const toogleDropdown = (): void => {\r\n        setShowDropdown(!showDropdown)\r\n    }\r\n\r\n    const handlerClickLi = (event: MouseEvent<HTMLLIElement>): void => {\r\n        const { textContent } = event.currentTarget\r\n        if (textContent !== null) {\r\n            setSelectedItemName(textContent)\r\n            setfiltredItems(items)\r\n            setInputValue('')\r\n            toogleDropdown()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={cn('select', {\r\n                'select--active': showDropdown,\r\n            })}\r\n            onClick={toogleDropdown}\r\n        >\r\n            <p className=\"select__name\">\r\n                {selectedItemName !== '' ? selectedItemName : name}\r\n            </p>\r\n            <ul\r\n                className={cn('select__dropdown', {\r\n                    'select__dropdown--active': showDropdown,\r\n                })}\r\n                onClick={(event) => event.stopPropagation()}\r\n            >\r\n                <li className=\"select__search\">\r\n                    <input\r\n                        onChange={handlerChangeInput}\r\n                        type=\"text\"\r\n                        value={inputValue}\r\n                        className=\"select__search-input\"\r\n                    />\r\n                </li>\r\n                {filtredItems.map((item) => (\r\n                    <li\r\n                        data-option=\"\"\r\n                        onClick={handlerClickLi}\r\n                        className=\"select__item\"\r\n                        key={item}\r\n                    >\r\n                        {item}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Select }\r\n","import { FC, useEffect } from 'react'\r\nimport './PokemonFilters.scss'\r\n\r\nimport { Select } from '../../Molecules/Select'\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks'\r\nimport {\r\n    loadPokemonSubTypes,\r\n    loadPokemonTypes,\r\n    setSelectedType,\r\n    setSelectedSubType,\r\n} from '../../../store/Slices/filtersSlice'\r\nimport { filtersSelector } from '../../../selectors'\r\nimport {\r\n    loadPokemonCards,\r\n    setCurrentPageNumber,\r\n} from '../../../store/Slices/pokemonsSlice'\r\n\r\nconst PokemonFilters: FC = () => {\r\n    const { types, subTypes, selectedSubType, selectedType } =\r\n        useAppSelector(filtersSelector)\r\n    const dispatch = useAppDispatch()\r\n\r\n    const handlerSetType = (typeName: string): void => {\r\n        dispatch(setCurrentPageNumber(1))\r\n        dispatch(setSelectedType(typeName))\r\n        dispatch(loadPokemonCards())\r\n    }\r\n\r\n    const handerSetSubType = (subTypeName: string): void => {\r\n        dispatch(setCurrentPageNumber(1))\r\n        dispatch(setSelectedSubType(subTypeName))\r\n        dispatch(loadPokemonCards())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!types && !subTypes) {\r\n            dispatch(loadPokemonTypes())\r\n            dispatch(loadPokemonSubTypes())\r\n        }\r\n    }, [dispatch, types, subTypes])\r\n\r\n    return (\r\n        <div className=\"pokemon-filters\">\r\n            {types && (\r\n                <div className=\"pokemon-filters__select\">\r\n                    <Select\r\n                        items={types}\r\n                        name=\"Type\"\r\n                        selectedItemName={selectedType}\r\n                        setSelectedItemName={handlerSetType}\r\n                    />\r\n                </div>\r\n            )}\r\n            {subTypes && (\r\n                <div className=\"pokemon-filters__select\">\r\n                    <Select\r\n                        items={subTypes}\r\n                        name=\"SubType\"\r\n                        selectedItemName={selectedSubType}\r\n                        setSelectedItemName={handerSetSubType}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { PokemonFilters }\r\n","import './Pokemons.scss'\r\nimport { FC, useState, useEffect } from 'react'\r\nimport { useNavigate, Navigate } from 'react-router'\r\n\r\nimport {\r\n    setSelectedPokemonId,\r\n    loadPokemonCard,\r\n} from '../../../store/Slices/pokemonSlice'\r\nimport {\r\n    loadPokemonCards,\r\n    setCurrentPageNumber,\r\n} from '../../../store/Slices/pokemonsSlice'\r\n\r\nimport { useAppDispatch, useAppSelector } from '../../../hooks'\r\nimport {\r\n    authSelector,\r\n    pokemonsSelector,\r\n    pokemonSelector,\r\n} from '../../../selectors'\r\nimport { SCREENS } from '../../../routes/endpoints'\r\n\r\nimport { Loader } from '../../Atoms/Loader'\r\nimport { ModalPokemonContent } from '../../Organisms/ModalPokemonContent'\r\nimport { Modal } from '../../Organisms/Modal'\r\nimport { Header } from '../../Organisms/Header'\r\nimport { PokemonCards } from '../../Organisms/PokemonCards'\r\nimport { Pagination } from '../../Organisms/Pagination'\r\nimport { PokemonFilters } from '../../Organisms/PokemonFilters'\r\n\r\nconst Pokemons: FC = () => {\r\n    const [isOpen, setIsOpen] = useState<boolean>(false)\r\n    const navigate = useNavigate()\r\n    const { isAuth } = useAppSelector(authSelector)\r\n    const { pokemons, fetching } = useAppSelector(pokemonsSelector)\r\n    const { pokemonsTotalCount, currentPageNumber } =\r\n        useAppSelector(pokemonsSelector)\r\n\r\n    const {\r\n        selectedPokemon,\r\n        selectedPokemonId,\r\n        fetching: isPokemonCardLoading,\r\n    } = useAppSelector(pokemonSelector)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    // pagination\r\n    const handlerClickPageNumber = (pageNumber: number) => {\r\n        dispatch(setCurrentPageNumber(pageNumber))\r\n        dispatch(loadPokemonCards())\r\n    }\r\n\r\n    // pokemonCards\r\n    const handlerClickCard = (id: string) => {\r\n        dispatch(setSelectedPokemonId(id))\r\n        dispatch(loadPokemonCard(id))\r\n        setIsOpen(true)\r\n    }\r\n\r\n    // modal\r\n    const handlerCloseModal = () => {\r\n        setIsOpen(false)\r\n    }\r\n\r\n    const handlerClickMoveToPokemonPage = () => {\r\n        navigate(`/pokemon/${selectedPokemonId}`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (pokemons === null) {\r\n            dispatch(loadPokemonCards())\r\n        }\r\n    }, [dispatch, pokemons])\r\n\r\n    if (!isAuth) {\r\n        return <Navigate to={SCREENS.SCREEN_LOGIN} />\r\n    }\r\n\r\n    return (\r\n        <div className=\"pokemons\">\r\n            <div className=\"container\">\r\n                <div className=\"pokemons__header\">\r\n                    <Header />\r\n                </div>\r\n                <main className=\"pokemons__main\">\r\n                    <div className=\"pokemons__filters\">\r\n                        <PokemonFilters />\r\n                    </div>\r\n                    <div className=\"pokemons__content\">\r\n                        <div className=\"pokemons__cards\">\r\n                            <PokemonCards\r\n                                onClickCard={handlerClickCard}\r\n                                pokemons={pokemons}\r\n                                loading={fetching}\r\n                            />\r\n                        </div>\r\n                        <div className=\"pokemons__pagination\">\r\n                            <Pagination\r\n                                totalCount={pokemonsTotalCount}\r\n                                currentPageNumber={currentPageNumber}\r\n                                onClickPage={handlerClickPageNumber}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n            <Modal open={isOpen} closeModal={handlerCloseModal}>\r\n                {selectedPokemon &&\r\n                    (isPokemonCardLoading ? (\r\n                        <div className=\"pokemons__loader\">\r\n                            <Loader />\r\n                        </div>\r\n                    ) : (\r\n                        <ModalPokemonContent\r\n                            name={selectedPokemon.name}\r\n                            imgSrc={selectedPokemon.images.small}\r\n                            onClose={handlerCloseModal}\r\n                            onMoreDetails={handlerClickMoveToPokemonPage}\r\n                        />\r\n                    ))}\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\nexport { Pokemons }\r\n","import { FC } from 'react'\r\nimport { Routes, Route, Navigate } from 'react-router-dom'\r\n\r\nimport { SCREENS } from './endpoints'\r\n\r\nimport { Login } from '../Components/pages/Login'\r\nimport { Otp } from '../Components/pages/Otp'\r\nimport { Pokemon } from '../Components/pages/Pokemon'\r\nimport { Pokemons } from '../Components/pages/Pokemons'\r\n\r\nconst AppRoutes: FC = () => (\r\n    <Routes>\r\n        <Route path={SCREENS.SCREEN_LOGIN} element={<Login />} />\r\n        <Route path={SCREENS.SCREEN_OTP} element={<Otp />} />\r\n        <Route path={SCREENS.SCREEN_POKEMONS} element={<Pokemons />} />\r\n        <Route path={SCREENS.SCREEN_POKEMON} element={<Pokemon />} />\r\n        <Route\r\n            path=\"*\"\r\n            element={<Navigate replace to={SCREENS.SCREEN_POKEMONS} />}\r\n        />\r\n    </Routes>\r\n)\r\n\r\nexport { AppRoutes }\r\n","import { FC } from 'react'\r\nimport './reset.css'\r\nimport './App.css'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { AppRoutes } from './routes'\r\n\r\nconst App: FC = function app() {\r\n    return (\r\n        <BrowserRouter>\r\n            <AppRoutes />\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Provider } from 'react-redux'\r\nimport { persistStore } from 'redux-persist'\r\nimport { PersistGate } from 'redux-persist/integration/react'\r\nimport { store } from './store'\r\n\r\nimport App from './App'\r\n\r\nconst persistor = persistStore(store)\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <PersistGate loading={null} persistor={persistor}>\r\n                <App />\r\n            </PersistGate>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}